//----------------------------------------------------------------------------------------------------------------------
/// @file FluidShader.h
/// @class FluidShader
/// @author Declan Russell
/// @date 28/04/2015
/// @version 1.0
/// @brief Fluid shader. Method can be found at http://developer.download.nvidia.com/presentations/2010/gdc/Direct3D_Effects.pdf
//----------------------------------------------------------------------------------------------------------------------

#ifndef FLUIDSHADER_H
#define FLUIDSHADER_H

#ifdef DARWIN
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #ifndef WIN32
        #include <GL/gl.h>
    #endif
#endif

#include <glm/matrix.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/matrix_inverse.hpp>
#include <glm/vec3.hpp>
#include <glm/vec4.hpp>

class FluidShader
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default constructor that sets up our shader
    /// @param _width  - the width of the window
    /// @parma _height - the height of the window
    //----------------------------------------------------------------------------------------------------------------------
    FluidShader(int _width, int _height);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~FluidShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief informas the shader of the screen size
    /// @warning This need to be done before you initialise shader
    //----------------------------------------------------------------------------------------------------------------------
    static inline void setScreenSize(int _w, int _h){m_width = _w;m_height = _h;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draws input points buffer with our fluid shader
    /// @param _positionVAO - VAO that hold the position data of our particles
    /// @param _numPoints - the number of points to draw
    /// @param _M - model matrix of our scene
    /// @param _V - view matrix of our scene
    /// @param _P - projection matrix of our scene
    /// @param _rotM - the rotation matrix of our scene to rotate our cube map
    /// @param _eyePos - position of the camera in the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw(GLuint _positionVAO, int _numPoints, glm::mat4 _M, glm::mat4 _V, glm::mat4 _P, glm::mat4 _rotM, glm::vec4 _eyePos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resizes our shader output
    /// @brief if the screen resizes we need to notify this shader as it uses render targets
    /// @param _w - width to resize
    /// @param _h - height to risize
    //----------------------------------------------------------------------------------------------------------------------
    static void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the shading cube map
    /// @brief _width - width of our cube map textures
    /// @brief _height - height of our cube map textures
    /// @brief _front - front cube map texture
    /// @brief _back - back cube map texture
    /// @brief _top - top cube map texture
    /// @brief _bottom - bottom cube map texture
    /// @brief _left - left cube map texture
    /// @brief _right - right cube map texture
    //----------------------------------------------------------------------------------------------------------------------
    static void setCubeMap(int _width, int _height, const GLvoid * _front, const GLvoid * _back, const GLvoid * _top, const GLvoid * _bottom, const GLvoid * _left, const GLvoid * _right);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets our refraction ratio
    //----------------------------------------------------------------------------------------------------------------------
    inline void setRefractionRatio(float _eta){m_refractionRatio = _eta; m_fresnalConst = (float)((1.0 - _eta) * (1.0 - _eta)) / ((1.0 + _eta) * (1.0 + _eta));}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for the fresnal power. this effects the reflection of our fluid
    //----------------------------------------------------------------------------------------------------------------------
    inline void setFresnalPower(float _power){m_fresnalPower = _power;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set how big we want to draw our fluid particles
    /// @param _size - desired size
    //----------------------------------------------------------------------------------------------------------------------
    inline void setPointSize(float _size){m_pointSize = _size;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set how thick we want to render each particle
    /// @param _thickness - desired thickness
    //----------------------------------------------------------------------------------------------------------------------
    inline void setThickness(float _thickness){m_pointThickness = _thickness;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the blur fall off of our bilateral filter shader
    /// @param _falloff - desired fall off value
    //----------------------------------------------------------------------------------------------------------------------
    inline void setBlurFalloff(float _falloff){m_blurFalloff = _falloff;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the blur ratius of our bilateral filter shader
    /// @param _radius - desired blue radius value
    //----------------------------------------------------------------------------------------------------------------------
    inline void setBlurRadius(float _radius){m_blurRadius = _radius;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the blur scale of our bilateral filter shader
    /// @param _scale - desired scale of our blur
    //----------------------------------------------------------------------------------------------------------------------
    inline void setBlurScale(float _scale){m_blurScale = _scale;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the desired color of our fluid. Color values from 0-1.
    /// @param _colR - red value
    /// @param _colG - green value
    /// @param _colB - blue value
    //----------------------------------------------------------------------------------------------------------------------
    inline void setColor(float _colR, float _colG, float _colB){m_fluidColor = glm::vec3(_colR,_colG,_colB);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates our shader
    //----------------------------------------------------------------------------------------------------------------------
    void init();
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief static member so we know how many instances of the shader there are
    //----------------------------------------------------------------------------------------------------------------------
    static int m_instanceCount;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the id number of our shader instance
    //----------------------------------------------------------------------------------------------------------------------
    int m_instanceNo;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bool to indicate if our cube map has been loaded in
    //----------------------------------------------------------------------------------------------------------------------
    static bool m_cubeMapCreated;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our fluid color
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 m_fluidColor;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Bilateral filter blur radius
    //----------------------------------------------------------------------------------------------------------------------
    float m_blurRadius;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Bilateral filter blur falloff
    //----------------------------------------------------------------------------------------------------------------------
    float m_blurFalloff;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Bilateral filter blur scale
    //----------------------------------------------------------------------------------------------------------------------
    float m_blurScale;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the thickness of our points
    //----------------------------------------------------------------------------------------------------------------------
    float m_pointThickness;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief fresnal constant
    //----------------------------------------------------------------------------------------------------------------------
    float m_fresnalConst;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our Fresnal power, this effects our reflection
    //----------------------------------------------------------------------------------------------------------------------
    float m_fresnalPower;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our refraction ratio
    //----------------------------------------------------------------------------------------------------------------------
    float m_refractionRatio;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief cube VAO for rendering cube maps
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_cubeVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief billboard VAO for rendering textures to screen
    //----------------------------------------------------------------------------------------------------------------------
    static GLuint m_billboardVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the size to draw our water particles
    //----------------------------------------------------------------------------------------------------------------------
    float m_pointSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the width of the screen to shade in
    //----------------------------------------------------------------------------------------------------------------------
    static int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the height of the screen to shade in
    //----------------------------------------------------------------------------------------------------------------------
    static int m_height;
    //----------------------------------------------------------------------------------------------------------------------

};

#endif // FLUIDSHADER_H
