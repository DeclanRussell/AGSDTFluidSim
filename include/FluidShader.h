//----------------------------------------------------------------------------------------------------------------------
/// @file FluidShader.h
/// @class FluidShader
/// @author Declan Russell
/// @date 28/04/2015
/// @version 1.0
/// @brief Fluid shader. Method can be found at http://developer.download.nvidia.com/presentations/2010/gdc/Direct3D_Effects.pdf
//----------------------------------------------------------------------------------------------------------------------

#ifndef FLUIDSHADER_H
#define FLUIDSHADER_H

#include <ngl/Mat4.h>
#include <ngl/Vec3.h>
#include <ngl/Vec4.h>

class FluidShader
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default constructor that sets up our shader
    /// @param _width  - the width of the window
    /// @parma _height - the height of the window
    //----------------------------------------------------------------------------------------------------------------------
    FluidShader(int _width, int _height);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~FluidShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief informas the shader of the screen size
    /// @warning This need to be done before you initialise shader
    //----------------------------------------------------------------------------------------------------------------------
    static inline void setScreenSize(int _w, int _h){m_width = _w;m_height = _h;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draws input points buffer with our fluid shader
    /// @param _positionVAO - VAO that hold the position data of our particles
    /// @param _numPoints - the number of points to draw
    /// @param _M - model matrix of our scene
    /// @param _V - view matrix of our scene
    /// @param _P - projection matrix of our scene
    /// @param _eyePos - position of the camera in the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw(GLuint _positionVAO, int _numPoints, ngl::Mat4 _M, ngl::Mat4 _V, ngl::Mat4 _P, ngl::Vec4 _eyePos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resizes our shader output
    /// @brief if the screen resizes we need to notify this shader as it uses render targets
    /// @param _w - width to resize
    /// @param _h - height to risize
    //----------------------------------------------------------------------------------------------------------------------
    static void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the shading cube map
    /// @brief _width - width of our cube map textures
    /// @brief _height - height of our cube map textures
    /// @brief _front - front cube map texture
    /// @brief _back - back cube map texture
    /// @brief _top - top cube map texture
    /// @brief _bottom - bottom cube map texture
    /// @brief _left - left cube map texture
    /// @brief _right - right cube map texture
    //----------------------------------------------------------------------------------------------------------------------
    static void setCubeMap(int _width, int _height, const GLvoid * _front, const GLvoid * _back, const GLvoid * _top, const GLvoid * _bottom, const GLvoid * _left, const GLvoid * _right);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets our refraction ratio
    //----------------------------------------------------------------------------------------------------------------------
    inline void setRefractionRatio(float _eta){m_refractionRatio = (float)_eta; m_fresnalConst = (float)((1.0 - _eta) * (1.0 - _eta)) / ((1.0 + _eta) * (1.0 + _eta));}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for the fresnal power. this effects the reflection of our fluid
    //----------------------------------------------------------------------------------------------------------------------
    inline void setFresnalPower(double _power){m_fresnalPower = (float)_power;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates our shader
    //----------------------------------------------------------------------------------------------------------------------
    void init();
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief static member so we know how many instances of the shader there are
    //----------------------------------------------------------------------------------------------------------------------
    static int m_instanceCount;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the id number of our shader instance
    //----------------------------------------------------------------------------------------------------------------------
    int m_instanceNo;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bool to indicate if our cube map has been loaded in
    //----------------------------------------------------------------------------------------------------------------------
    static bool m_cubeMapCreated;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our fluid color
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_fluidColor;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Bilateral filter blur radius
    //----------------------------------------------------------------------------------------------------------------------
    float m_blurRadius;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Bilateral filter blur falloff
    //----------------------------------------------------------------------------------------------------------------------
    float m_blurFalloff;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the thickness of our points
    //----------------------------------------------------------------------------------------------------------------------
    float m_pointThickness;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief fresnal constant
    //----------------------------------------------------------------------------------------------------------------------
    float m_fresnalConst;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our Fresnal power, this effects our reflection
    //----------------------------------------------------------------------------------------------------------------------
    float m_fresnalPower;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our refraction ratio
    //----------------------------------------------------------------------------------------------------------------------
    float m_refractionRatio;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief cube VAO for rendering cube maps
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_cubeVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief billboard VAO for rendering textures to screen
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_billboardVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the size to draw our water particles
    //----------------------------------------------------------------------------------------------------------------------
    float m_pointSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the width of the screen to shade in
    //----------------------------------------------------------------------------------------------------------------------
    static int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the height of the screen to shade in
    //----------------------------------------------------------------------------------------------------------------------
    static int m_height;
    //----------------------------------------------------------------------------------------------------------------------

};

#endif // FLUIDSHADER_H
