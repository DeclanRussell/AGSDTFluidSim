#ifndef SPHENGINE_H
#define SPHENGINE_H

//----------------------------------------------------------------------------------------------------------------------
/// @file SPHEngine.h
/// @class SPHEngine
/// @author Declan Russell
/// @date 09/03/2015
/// @version 1.0
/// @brief This class uses cuda and parralel algorithms to manage particles in a fluid simulation.
/// @brief Our fluid simulation uses smoothed particle hydrodynamics and true navier stokes equations to
/// @brief compute our particle positions in our simulation.
/// @brief This class also manages its own openGL buffer storing postions of particles in
/// @brief vertex attrip pointer 0. In case you wish to draw these particles.
//----------------------------------------------------------------------------------------------------------------------

#include <GL/glew.h>

//our cuda libraries
#include <cuda_runtime.h>
#include <cuda_gl_interop.h>

class SPHEngine
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our default lazy constructor
    //----------------------------------------------------------------------------------------------------------------------
    SPHEngine():m_numParticles(0){}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief constructor which allows us to declare how many particles we want to have on simulation initialisation.
    //----------------------------------------------------------------------------------------------------------------------
    SPHEngine(unsigned int _numParticles):m_numParticles(_numParticles){init();}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~SPHEngine();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Initialises our class. This allocates all memory needed for the simulation.
    //----------------------------------------------------------------------------------------------------------------------
    void init();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief updates our particles positions with navier-stokes equations based on timestep of the update.
    /// @param _timeStep - the timestep we wish to update our particles with.
    //----------------------------------------------------------------------------------------------------------------------
    void update(unsigned int _timeStep);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Draws our VAO. This contatins a buffer of positions mapped to vertexAttriBArray 0
    //----------------------------------------------------------------------------------------------------------------------
    void drawArrays();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a simple function to caluclate next prime number of the inpur variable
    /// @param _x - vaule you wish to calculate next prime number for
    /// @return the next lowest prime number higher than our input value _X
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int nextPrimeNum(int _x);
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the number of particles in our simulation
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_numParticles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our openGL VAO
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief openGL buffer that hold the positions of our particles on the GPU
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Cuda resource used to access our OpenGL position buffer by Cuda
    //----------------------------------------------------------------------------------------------------------------------
    cudaGraphicsResource_t m_cudaBufferPtr;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to our hash keys buffer on our device
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int *m_dhashKeys;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the size of our hash table
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_hashTableSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to our cell occupancy buffer on our device
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int *m_dCellOccBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the number of threads that our device will haveper block
    //----------------------------------------------------------------------------------------------------------------------
    int m_numThreadsPerBlock;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the max number of blocks that we can have
    //----------------------------------------------------------------------------------------------------------------------
    int m_maxNumBlocks;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // SPHENGINE_H
