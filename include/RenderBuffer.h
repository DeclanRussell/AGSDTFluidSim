//----------------------------------------------------------------------------------------------------------------------
/// @file RenderBuffer.h
/// @class RenderBuffer
/// @author Declan Russell
/// @date 28/04/2015
/// @version 1.0
/// @brief Class for creating render buffers
//----------------------------------------------------------------------------------------------------------------------

#ifndef RENDERBUFFER_H
#define RENDERBUFFER_H

#ifdef DARWIN
    #include <GLFW/glfw3.h>
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #include <GL/gl.h>
#endif

#include "AbstractOpenGLObject.h"

class RenderBuffer : public AbstractOpenGlObject
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default constructor creates our render buffer
    //----------------------------------------------------------------------------------------------------------------------
    RenderBuffer(GLenum _internalformat, GLenum _attachment, GLsizei _width, GLsizei _height);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default destructor deletes render buffer
    //----------------------------------------------------------------------------------------------------------------------
    ~RenderBuffer();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief binds our render buffer
    //----------------------------------------------------------------------------------------------------------------------
    void bind();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief unbinds our render buffer
    //----------------------------------------------------------------------------------------------------------------------
    void unbind();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reizes our render buffer
    /// @param _width - deisred width of render buffer
    /// @param _height - desired height of render buffer
    //----------------------------------------------------------------------------------------------------------------------
    void resize(GLsizei _width, GLsizei _height);
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief width of our render buffer
    //----------------------------------------------------------------------------------------------------------------------
    GLsizei m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief height of our render buffer
    //----------------------------------------------------------------------------------------------------------------------
    GLsizei m_height;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief internal format of our render target
    //----------------------------------------------------------------------------------------------------------------------
    GLenum m_internalFormat;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // RENDERBUFFER_H
