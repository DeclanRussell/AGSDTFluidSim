#ifndef OPENGLWIDGET_H
#define OPENGLWIDGET_H

//----------------------------------------------------------------------------------------------------------------------
/// @file OpenGLWidget.h
/// @class OpenGLWidget
/// @brief Basic Qt widget that holds a OpenGL context
/// @author Declan Russell
/// @version 1.0
/// @date 2/3/15 Initial version
//----------------------------------------------------------------------------------------------------------------------

#include <GL/glew.h>
#include <QGLWidget>
#include <QEvent>
#include <QResizeEvent>
#include <QMessageBox>
#include <QString>
#include <QTime>
#include <QColor>
#include <ngl/Mat4.h>
#include <ngl/Camera.h>
#include <ngl/Text.h> //<-- for writting in GL

#include "SPHEngine.h"
#include "FluidShader.h"

class OpenGLWidget : public QGLWidget
{
    Q_OBJECT //must include to gain access to qt stuff

public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    explicit OpenGLWidget(const QGLFormat _format, QWidget *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~OpenGLWidget();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the virtual initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief called to resize the window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(const int _w, const int _h );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for our point size
    //----------------------------------------------------------------------------------------------------------------------
    inline void setPointSize(float _size){/*m_pointSize = _size;*/}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief keyboard press event
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse move
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse button release
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse button press
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a timer event function from the Q_object
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(QTimerEvent *);
    //----------------------------------------------------------------------------------------------------------------------
public slots:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to load cube maps to for our enironment map
    /// @brief this function pressumes that all our cube map textures are in one texture
    /// @param _loc - the location of our cube map texture
    /// @return If the texture has been loaded correctly
    //----------------------------------------------------------------------------------------------------------------------
    bool loadCubeMap(QString _loc);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a slot to change our particle size
    /// @param _size - particle size
    //----------------------------------------------------------------------------------------------------------------------
    inline void setParticleSize(double _size){/*m_fluidShader->setPointSize(_size);*/}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a slot to change our particle thickess
    /// @param _thickness - particle thickness
    //----------------------------------------------------------------------------------------------------------------------
    inline void setParticleThickness(double _thickness){/*m_fluidShader->setThickness(_thickness);*/}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a slot to change our bilateral filter blur falloff
    /// @param _falloff - bilateral blur falloff
    //----------------------------------------------------------------------------------------------------------------------
    inline void setBlurFalloff(double _falloff){/*m_fluidShader->setBlurFalloff(_falloff);*/}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a slot to change our bilateral filter blur radius
    /// @param _radius - bilateral blur radius
    //----------------------------------------------------------------------------------------------------------------------
    inline void setBlurRadius(double _radius){/*m_fluidShader->setBlurRadius( _radius);*/}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief play/pause toggle slot
    //----------------------------------------------------------------------------------------------------------------------
    inline void playToggle(){m_update = !m_update;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set volume of our fluid slot
    /// @param _vol - volume
    //----------------------------------------------------------------------------------------------------------------------
    inline void setVolume(double _vol){m_SPHEngine->setVolume((float) _vol);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set density of our fluid slot
    /// @param _den - density
    //----------------------------------------------------------------------------------------------------------------------
    inline void setDensity(double _den){m_SPHEngine->setDesity((float) _den);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set viscoty coeficient of our fluid slot
    /// @param _visc - viscosity coeficient
    //----------------------------------------------------------------------------------------------------------------------
    inline void setViscCoef(double _visc){m_SPHEngine->setViscCoef((float)_visc);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set gas constant of our fluid slot
    /// @param _gasConst - gas constant
    //----------------------------------------------------------------------------------------------------------------------
    inline void setGasConst(double _gasConst){m_SPHEngine->setGasConstant((float)_gasConst);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set smoothing length of our fluid slot
    /// @param _len - smoothing length
    //----------------------------------------------------------------------------------------------------------------------
    inline void setSmoothingLength(double _len){m_SPHEngine->setSmoothingLength((float)_len);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the color of our fluid slot
    //----------------------------------------------------------------------------------------------------------------------
    inline void setFluidColor(QColor _col){/*m_fluidShader->setColor(_col.redF(),_col.greenF(),_col.blueF());*/}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a slot to set the playback speed of our simulation
    /// @param _speed - the speed of play back as a percentage 100.f is real time
    //----------------------------------------------------------------------------------------------------------------------
    inline void setPlaybackSpeed(int _speed){m_playBackSpeed = (float)_speed/100.f;}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the playback speed of our simulation
    //----------------------------------------------------------------------------------------------------------------------
    float m_playBackSpeed;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our SPHEngine that manages our particles.
    //----------------------------------------------------------------------------------------------------------------------
    SPHEngine *m_SPHEngine;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our fluid shader
    //----------------------------------------------------------------------------------------------------------------------
    FluidShader *m_fluidShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used for calculating framerate
    //----------------------------------------------------------------------------------------------------------------------
    QTime m_currentTime;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used for drawing text in openGL
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Text *m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Model matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_modelMatrix;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Normal Matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_normalMatrix;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief model pos
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a bool to tell us if we need to update
    //----------------------------------------------------------------------------------------------------------------------
    bool m_update;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Spin face x
    //----------------------------------------------------------------------------------------------------------------------
    float m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sping face y
    //----------------------------------------------------------------------------------------------------------------------
    float m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief rotate bool
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief translate bool
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------

};

#endif // OPENGLWIDGET_H
