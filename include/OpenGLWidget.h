#ifndef OPENGLWIDGET_H
#define OPENGLWIDGET_H

//----------------------------------------------------------------------------------------------------------------------
/// @file OpenGLWidget.h
/// @class OpenGLWidget
/// @brief Basic Qt widget that holds a OpenGL context
/// @author Declan Russell
/// @version 1.0
/// @date 2/3/15 Initial version
//----------------------------------------------------------------------------------------------------------------------

#include <GL/glew.h>
#include <QGLWidget>
#include <QEvent>
#include <QResizeEvent>
#include <QMessageBox>
#include <QString>
#include <QTime>
#include <ngl/Mat4.h>
#include <ngl/Camera.h>
#include <ngl/Text.h> //<-- for writting in GL
#include "SPHEngine.h"


class OpenGLWidget : public QGLWidget
{
    Q_OBJECT //must include to gain access to qt stuff

public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    explicit OpenGLWidget(const QGLFormat _format, QWidget *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~OpenGLWidget();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the virtual initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief called to resize the window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(const int _w, const int _h );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for our point size
    //----------------------------------------------------------------------------------------------------------------------
    inline void setPointSize(float _size){m_pointSize = _size;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief keyboard press event
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse move
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse button release
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mouse button press
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent(QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a timer event function from the Q_object
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(QTimerEvent *);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief loads cube maps to our GPU
    /// @brief this function pressumes that all our cube map textures are in one texture
    /// @param _loc - the location of our cube map texture
    //----------------------------------------------------------------------------------------------------------------------
    bool loadCubeMap(QString _loc);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for rafraction ratio. This effects the refraction of our fluid
    //----------------------------------------------------------------------------------------------------------------------
    inline void setRefractionRatio(float _eta){m_refractionRatio = _eta; m_fresnalConst = ((1.0 - _eta) * (1.0 - _eta)) / ((1.0 + _eta) * (1.0 + _eta));}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for the fresnal power. this effects the reflection of our fluid
    //----------------------------------------------------------------------------------------------------------------------
    inline void setFresnalPower(float _power){m_fresnalPower = _power;}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief fresnal constant
    //----------------------------------------------------------------------------------------------------------------------
    float m_fresnalConst;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our Fresnal power, this effects our reflection
    //----------------------------------------------------------------------------------------------------------------------
    float m_fresnalPower;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our refraction ratio
    //----------------------------------------------------------------------------------------------------------------------
    float m_refractionRatio;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief cube VAO for rendering cube maps
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_cubeVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief texture to hold our cube map
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_cubeMapTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief billboard VAO for rendering textures to screen
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_billboardVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a texture holding the depth information of our render
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_depthRender;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a texture holding the bilateral filter render pass
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_bilateralRender;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a texture holding the thickness render pass
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_thicknessRender;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a static frame buffer to render our thickness pass to
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_thicknessFrameBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a static frame buffer to render our bilateral filter pass to
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_bilateralFrameBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a static frame buffer to render our first depth pass to
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_depthFrameBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a static depth buffer for depth testing
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_staticDepthBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the size to draw our water particles
    //----------------------------------------------------------------------------------------------------------------------
    float m_pointSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our SPHEngine that manages our particles.
    //----------------------------------------------------------------------------------------------------------------------
    SPHEngine *m_SPHEngine;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used for calculating framerate
    //----------------------------------------------------------------------------------------------------------------------
    QTime m_currentTime;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used for drawing text in openGL
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Text *m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Model matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_modelMatrix;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Normal Matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_normalMatrix;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief model pos
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a bool to tell us if we need to update
    //----------------------------------------------------------------------------------------------------------------------
    bool m_update;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Spin face x
    //----------------------------------------------------------------------------------------------------------------------
    float m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sping face y
    //----------------------------------------------------------------------------------------------------------------------
    float m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief rotate bool
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief translate bool
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------

};

#endif // OPENGLWIDGET_H
