#ifndef IMPORTMESH_H
#define IMPORTMESH_H
//----------------------------------------------------------------------------------------------------------------------
/// @file ImportMesh.h
/// @brief A class to import, tetrahedralise and create half edge structure for a mesh
/// @author Declan Russell
/// @version 1.0
/// @date 15/12/14 Initial version
//----------------------------------------------------------------------------------------------------------------------
#include <string>
//--------library used for tetrahedralizing a mesh
//#include "tetgen.h"
//--------Open mesh for importing model to half edge
#include <OpenMesh/Core/IO/MeshIO.hh>
#include <OpenMesh/Core/Mesh/TriMesh_ArrayKernelT.hh>
#include <ngl/Mat4.h>
#include <ngl/Camera.h>
#include <ngl/VertexArrayObject.h>

class ImportMesh
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our defualt constructor, imports a mesh from a location
    /// @param _loc - the location of the mesh we wish to import
    //----------------------------------------------------------------------------------------------------------------------
    ImportMesh(std::string _loc);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our defaut destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~ImportMesh();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief type def our array kernal for easier use
    //----------------------------------------------------------------------------------------------------------------------
    typedef OpenMesh::TriMesh_ArrayKernelT<OpenMesh::DefaultTraits> MyMesh;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw out mesh
    //----------------------------------------------------------------------------------------------------------------------
    void draw(ngl::Mat4 _mouseGlobalTX, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief array of our vertex postions keep these public so we can create our selector positions
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_vertPositions;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief updates our VAO's information
    //----------------------------------------------------------------------------------------------------------------------
    void update();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to our mesh
    //----------------------------------------------------------------------------------------------------------------------
    inline MyMesh &getMeshPtr(){return m_mesh;}
    //----------------------------------------------------------------------------------------------------------------------
protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our basic constructor that we wont be using so lets keep it protected. Hands off!
    //----------------------------------------------------------------------------------------------------------------------
    ImportMesh();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our function for tetrahedralizing our mesh with tetgen
    /// @warning will crash if m_mesh is not initialized so lets keep it safe and protected
    //----------------------------------------------------------------------------------------------------------------------
    void tetrahedralizeMesh();
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our vertex array object;
    //----------------------------------------------------------------------------------------------------------------------
    ngl::VertexArrayObject *m_VAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load our matricies to our shader for drawing
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(ngl::Mat4 _mouseGlobalTX, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to hold our original imported mesh
    //----------------------------------------------------------------------------------------------------------------------
    MyMesh m_mesh;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our tetrahedralized mesh
    //----------------------------------------------------------------------------------------------------------------------
    //tetgenio m_tetMesh;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // IMPORTMESH_H
